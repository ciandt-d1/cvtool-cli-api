# coding: utf-8

from __future__ import absolute_import

from .job_input_parameters import JobInputParameters

from api.util import deserialize_model
from .base_model_ import Model


class NewJobRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, auto_start=False, parameters=None):
        """
        NewJobRequest - a model defined in Swagger

        :param type: The type of this NewJobRequest.
        :type type: str
        :param auto_start: The auto_start of this NewJobRequest.
        :type auto_start: bool
        :param parameters: The parameters of this NewJobRequest.
        :type parameters: JobInputParameters
        """
        self.swagger_types = {
            'type': str,
            'auto_start': bool,
            'parameters': JobInputParameters
        }

        self.attribute_map = {
            'type': 'type',
            'auto_start': 'auto_start',
            'parameters': 'parameters'
        }

        self._type = type
        self._auto_start = auto_start
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewJobRequest of this NewJobRequest.
        :rtype: NewJobRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def type(self):
        """
        Gets the type of this NewJobRequest.
        Job type

        :return: The type of this NewJobRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NewJobRequest.
        Job type

        :param type: The type of this NewJobRequest.
        :type type: str
        """
        allowed_values = ["csv", "flickr"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def auto_start(self):
        """
        Gets the auto_start of this NewJobRequest.
        create job and start ?

        :return: The auto_start of this NewJobRequest.
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """
        Sets the auto_start of this NewJobRequest.
        create job and start ?

        :param auto_start: The auto_start of this NewJobRequest.
        :type auto_start: bool
        """

        self._auto_start = auto_start

    @property
    def parameters(self):
        """
        Gets the parameters of this NewJobRequest.

        :return: The parameters of this NewJobRequest.
        :rtype: JobInputParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this NewJobRequest.

        :param parameters: The parameters of this NewJobRequest.
        :type parameters: JobInputParameters
        """

        self._parameters = parameters

