# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.job_input_parameters import JobInputParameters
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class NewJobRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type: str=None, auto_start: bool=False, input_params: JobInputParameters=None):
        """
        NewJobRequest - a model defined in Swagger

        :param type: The type of this NewJobRequest.
        :type type: str
        :param auto_start: The auto_start of this NewJobRequest.
        :type auto_start: bool
        :param input_params: The input_params of this NewJobRequest.
        :type input_params: JobInputParameters
        """
        self.swagger_types = {
            'type': str,
            'auto_start': bool,
            'input_params': JobInputParameters
        }

        self.attribute_map = {
            'type': 'type',
            'auto_start': 'auto_start',
            'input_params': 'input_params'
        }

        self._type = type
        self._auto_start = auto_start
        self._input_params = input_params

    @classmethod
    def from_dict(cls, dikt) -> 'NewJobRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewJobRequest of this NewJobRequest.
        :rtype: NewJobRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """
        Gets the type of this NewJobRequest.
        Job type

        :return: The type of this NewJobRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this NewJobRequest.
        Job type

        :param type: The type of this NewJobRequest.
        :type type: str
        """
        allowed_values = ["csv", "flickr"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def auto_start(self) -> bool:
        """
        Gets the auto_start of this NewJobRequest.
        create job and start ?

        :return: The auto_start of this NewJobRequest.
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start: bool):
        """
        Sets the auto_start of this NewJobRequest.
        create job and start ?

        :param auto_start: The auto_start of this NewJobRequest.
        :type auto_start: bool
        """

        self._auto_start = auto_start

    @property
    def input_params(self) -> JobInputParameters:
        """
        Gets the input_params of this NewJobRequest.

        :return: The input_params of this NewJobRequest.
        :rtype: JobInputParameters
        """
        return self._input_params

    @input_params.setter
    def input_params(self, input_params: JobInputParameters):
        """
        Sets the input_params of this NewJobRequest.

        :param input_params: The input_params of this NewJobRequest.
        :type input_params: JobInputParameters
        """

        self._input_params = input_params

