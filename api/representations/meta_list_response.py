# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class MetaListResponse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, offset=None, limit=None, total=None):
        """
        MetaListResponse - a model defined in Swagger

        :param offset: The offset of this MetaListResponse.
        :type offset: int
        :param limit: The limit of this MetaListResponse.
        :type limit: int
        :param total: The total of this MetaListResponse.
        :type total: int
        """
        self.swagger_types = {
            'offset': int,
            'limit': int,
            'total': int
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'total': 'total'
        }

        self._offset = offset
        self._limit = limit
        self._total = total

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaListResponse of this MetaListResponse.
        :rtype: MetaListResponse
        """
        return deserialize_model(dikt, cls)

    @property
    def offset(self):
        """
        Gets the offset of this MetaListResponse.
        offset

        :return: The offset of this MetaListResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this MetaListResponse.
        offset

        :param offset: The offset of this MetaListResponse.
        :type offset: int
        """
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def limit(self):
        """
        Gets the limit of this MetaListResponse.
        limit

        :return: The limit of this MetaListResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this MetaListResponse.
        limit

        :param limit: The limit of this MetaListResponse.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def total(self):
        """
        Gets the total of this MetaListResponse.
        total

        :return: The total of this MetaListResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this MetaListResponse.
        total

        :param total: The total of this MetaListResponse.
        :type total: int
        """
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total

